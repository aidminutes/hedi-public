import { NextApiResponse } from "next";

export function createNextResponseMock(): NextApiResponse {
  return {
    _destroy: jest.fn(),
    _final: jest.fn(),
    _write: jest.fn(),
    addTrailers: jest.fn(),
    assignSocket: jest.fn(),
    chunkedEncoding: false,
    clearPreviewData: jest.fn(),
    connection: {} as any,
    cork: jest.fn(),
    destroy: jest.fn(),
    destroyed: false,
    detachSocket: jest.fn(),
    eventNames: jest.fn(),
    finished: false,
    flushHeaders: jest.fn(),
    getHeader: jest.fn(),
    getHeaderNames: jest.fn(),
    getHeaders: jest.fn(),
    getMaxListeners: jest.fn(),
    hasHeader: jest.fn(),
    headersSent: false,
    json: jest.fn().mockReturnThis(),
    listenerCount: jest.fn(),
    listeners: jest.fn(),
    off: jest.fn(),
    pipe: jest.fn(),
    rawListeners: jest.fn(),
    removeAllListeners: jest.fn(),
    removeHeader: jest.fn(),
    send: jest.fn(),
    sendDate: false,
    setDefaultEncoding: jest.fn(),
    setHeader: jest.fn(),
    setMaxListeners: jest.fn(),
    setPreviewData: jest.fn(),
    setTimeout: jest.fn(),
    shouldKeepAlive: false,
    socket: {} as any,
    status: jest.fn().mockReturnThis(),
    statusCode: 0,
    statusMessage: "",
    uncork: jest.fn(),
    unstable_revalidate: jest.fn(),
    upgrading: false,
    useChunkedEncodingByDefault: false,
    writable: false,
    writableCorked: 0,
    writableEnded: false,
    writableFinished: false,
    writableHighWaterMark: 0,
    writableLength: 0,
    writableObjectMode: false,
    writeContinue: jest.fn(),
    writeProcessing: jest.fn(),
    addListener: jest.fn(),
    emit: jest.fn(),
    end: jest.fn(),
    on: jest.fn(),
    once: jest.fn(),
    prependListener: jest.fn(),
    prependOnceListener: jest.fn(),
    redirect: jest.fn(),
    removeListener: jest.fn(),
    write: jest.fn(),
    writeHead: jest.fn(),
  };
}
